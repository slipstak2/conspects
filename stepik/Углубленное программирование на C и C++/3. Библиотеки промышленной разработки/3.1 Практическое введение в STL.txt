СТАНДАРТНАЯ БИБЛИОТЕКА ШАБЛОНОВ(STL): ИСТОРИЯ СОЗДАНИЯ
Стандартная библиотека шаблонов(Standart Templates Library, STL) была задумана в 1970-х - 1990-ч гг. А. Степановым, Д. Мюссером(D.Musser) и др. как первая универсальная библиотека обобщенных алгоритмов и структур данных и в качестве составной части стандартной библиотеки языка С++ является воплощением результатов изысканий в области теоретической информатики

ПРЕДПОСЛЫКИ СОЗДАНИЯ STL
По словам А.Степанова, наибольшее значение при создании STL придавалось следующим фундаментальным идеям:
   * обобщенному программированию как дисциплине, посвященной построению многократно используемых алгоритмов, структур данных, механизмов распределения памяти и др.
   * достижению высокого уровня абстракции без потери производительности.
   * следованию фон-неймановской модели(в первую очередь - в работе с базовыми числовыми типами данных при эффективной реализации парадигмы процедурного программирования, а не программирования "в математических функциях")
   * использованию семантики передачи объектов по значению
   
СОСТАВ STL
Концептуально в состав STL входят:
   * обобщенные контейнеры(универсальные структуры данных) - векторы, списки, множества и т.д.
   * обобщенные алгоритмы решения типовых задач поиска, сортировки, вставки, удаления данных и т.д.
   * итераторы(абстрактные методы доступа к данным), являющиеся обобщением указателей и реализующие операции доступа алгоритмов к контейрам
   * функциональные объекты, в объектно-ориентированнм ключе обобщающие понятия функции
   * адаптеры, модифицирующие интерфейсы контейнеров, итераторов, функций
   * распределители памяти
   
   
КОНТЕЙНЕРЫ: ОБЗОР
Контейрены STL - объекты, предназначенные для хранения коллекций другиех объектов, в том числе и контейнеров

ПОСЛЕДОВАТЕЛЬНЫЕ КОНТЕЙНЕРЫ
Последовательные контейнеры STL хранят коллекции объектов одного типа Т, обеспечивая их строгое линейное упорядочивание.
Вектор - динамический массив типа std::vector<T>, характеризуется произвольным доступом и автоматическим изменением размера при добавлении и удалении элементов
Дек(двусторонняя очередь, deque - double-ended queue) - аналог вектора типа std::deque<T> c возможностью быстрой вставки и удаления элементов в начале и конце контейнера
Список - контейнер типа std::list<T>, обеспечивающий константное время вставки и удаления в любой точке, но отличающийся линейным временем доступа.

Примечание: Последовательными контейнерами STL в большинстве случаев могут считаться массив T a[N] и класс std::string

УПОРЯДОЧЕННЫЕ АССОЦИАТИВНЫЕ КОНТЕЙНЕРЫ
Упорядоченные ассоциативные контейнеры STL представляют возможность быстрого доступа к объектам коллекции переменной длины, основанных на работе с ключами
Множество - контейнер типа std::set<T> c поддержкой уникальности ключей и быстрым доступом к ним. Мультимножество - аналогичный множеству контейнер типа std::multimap<T> c возможностью размещения в  нем ключей кратности 2 и выше.
Отображение - контейнер типа std::map<Key, T> с поддержкой уникальных ключей типа Key и быстрым доступом по ключам к значениям типа Т. Мультиотображение - аналогичным отображению контейнер типа std::multimap<Key, T> с возможностью размещенияя в нем пар значений с ключами кратности 2 и выше.

ВЕКТОРЫ: ОБЩИЕ СВЕДЕНИЯ
Вектор - последовательный контейнер
   * переменной длины
   * с произвольным доступом к элементам
   * с быстрой вставкой и удалением элементов в конце контейнера
   * с частичной гарантией сохранения корректности итераторов после вставки и удаления
Технически вектор STL реализован как шаблон с параметрами вида:
// 1-й параметр - тип данных, 2-й распределитель памяти
template<typename T, typename Allocator = std::allocator<T> >

ДЕКИ: ОБЩИЕ СВЕДЕНИЯ
Дек - последовательный контейнер
   * переменной длины
   * с произвольным доступом к элементам
   * с быстрой вставкой и удалением элементов в начале и конце контейнера
   * без гарантии сохранения корректности итераторов после вставки и удаления
Технически дек реализован как шаблон с параметрами вида:
template<typename T, typename Allocator = std::allocator<T> >
Предоставляемые встроенные типы и порядок конструкции аналогичны таковым для контейнера std::vector<T>

СПИСКИ: ОБЩИЕ СВЕДЕНИЯ
Список - последовательный контейнер
   * переменной длины
   * с двунаправленными итераторами для доступа к элементам
   * с быстрой вставкой и удалением элементов в любой позиции
   * со строгой гарантией сохранения корректности итераторов после вставки и удаления
Технически список реализован как шаблон с параметрами вида:
template<typename T, typename Allocator = std::allocator<T>>

Предоставляемые встроенные типы и порядок конструкции аналогичны таковым для контейнера std::vector<T>

МНОЖЕСТВА И МУЛЬТИМНОЖЕСТВА: ОБЩИЕ СВЕДЕНИЯ
Множества, мультимножества - упорядоченные ассоциативные контейнеры
   * переменной длины
   * с двунаправленными итераторами для доступа к элементам
   * с логарифмическим временем доступа
Технически множества и мультимножества STL реализованы как шаблоны с параметрами вида:
// 1-ый пар. - тип ключа, 2-й - функция сравнения
template<typename Key, typename Compare = std::less<Key>, typename Allocator = std::allocator<Key>>

ОТОБРАЖЕНИЯ И МУЛЬТИОТОБРАЖЕНИЯ: ОБЩИЕ СВЕДЕНИЯ
Отображения, мультиотображения - упорядоченныме ассоциативные контейнеры переменной длины:
   * моделирующие структуры данных типа "ассоциативный массив с (не)числовой индексацией"
   * с двунаправленными итераторами для доступа к элементам
   * с логарифмическим временем доступа
Технически отображения и мультиотображения STL реализованы как шаблоны с параметрами вида:
// 1-ый, 2 пар - тип ключа и связанных данных,
// 3-й - функция сравнения
template <typename Key, typename T, typename Compare=std::less<Key>, typename Allocator=std::allocator<std::pair<const Key, T>>>











