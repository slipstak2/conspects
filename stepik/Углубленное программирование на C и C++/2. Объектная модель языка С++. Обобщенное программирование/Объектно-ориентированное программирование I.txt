ИНКАПСУЛЯЦИЯ - БАЗОВЫЙ ПРИНЦИП ооп
Инкапсуляция, или сокрытие реализации, является фундаментом объектного подхода к разработке ПО
   * Следую данному подходу, программист рассматривает задачу в терминах предметной области, а создаваемый им продукт видит как совокупность абстрактных сущностей - классов(в свою очередь формально являющихся пользовательскими типами)
   * Инкапсуляция предотвращает прямой достук к внутреннему представлению класса из других классов и функций программы
   * Инкапсуляция предотвращает прямой доступ к внутреннему представлению класса из других классов и функций программы
   * Без нее теряют смысл остальные основополагающие принципы ООП: наследования и полиморфизм. Сущность инкапсуляции можно отразить формулой: ОТКРЫТЫЙ ИНТЕРФЕЙС + СКРЫТАЯ РЕАЛИЗАЦИЯ
   

КЛАСС: В УЗКОМ ИЛИ ШИРОКОМ СМЫСЛЕ?

Принцип инкапсуляции распространяется не только на классы(class), но и на структуры(struct), а также объединения(union). Это связано с расширительными толкованием понятия "класс" в языке С++, трактуемом как в узком, так и широком смысле:
   - класс в узком смысле - одноименный составной пользовательский тип данных, являющися контейнером для данных и алгоритмов их обработки. Вводится в текст программы определением типа со спецификатором class.
   - класс в широком смысле - любой составной пользовательский тип данных, агрегирующий данные и алгоритмы их обработки. Вводится в текст программы определением типа с одним из спецификаторов struct, union или class
   
Каждое определение класса вводит новый типа данных. Тело класса определяет полный перечеть его членов, который не может быть расширен после закрытия тела.

УКАЗАТЕЛЬ this

Указатель this - неявно определеяемый константный указатель на объект класса, через который происходит вызов соответствующего нестатического метода(чьем "нулевым" неявным параметром он является)
Для неконстантный устойчивых методов класса T имеет тип T *const, для констанных - имеет тип const T *const, для неустойчивых - volatile T *const.
Указатель this допускает разыменовывания(*this) и его применение внутри методов допустимо, но чаще всего излишне. Исключение составляют две ситуации:
   * сравнение адресов объектов:
      if (this != someObj) /*...*/
   * оператор return:
      return *this;
      
      
Класс как область видимости
Класс - наряду с блоком, функцией и пространством имен - является конструкцией С++, которая вводит в состав программы одноименную область видимости.(Строго говоря, область видимости вводит определение класса, а именного его тело)
   - Все члены класса видны в нем самом с момента своего объявления. Порядок объявления членов класса важен: нельзя ссылаться на члены которые предстоит объявить позднее. Исключение составляет разрешение имен в определенных встоенных методов, а также имен(статических членов), используемых как аргументы по умолчанию.
   
В области видимости класса находится не только его тело, но и внешние определения его членов: методов и статических аттрибутов